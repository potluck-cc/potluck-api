
  input TableBooleanFilterInput {
    eq: Boolean
    ne: Boolean
  }

  input TableFloatFilterInput {
    between: [Float]
    contains: Float
    eq: Float
    ge: Float
    gt: Float
    le: Float
    lt: Float
    ne: Float
    notContains: Float
  }

  input TableIDFilterInput {
    beginsWith: ID
    between: [ID]
    contains: ID
    eq: ID
    ge: ID
    gt: ID
    le: ID
    lt: ID
    ne: ID
    notContains: ID
  }

  input TableIntFilterInput {
    between: [Int]
    contains: Int
    eq: Int
    ge: Int
    gt: Int
    le: Int
    lt: Int
    ne: Int
    notContains: Int
  }

  input TableStringFilterInput {
    beginsWith: String
    between: [String]
    contains: String
    eq: String
    ge: String
    gt: String
    le: String
    lt: String
    ne: String
    notContains: String
  }

    type Store {
        
        id: ID!
        companyId: ID!
        hours: [timeblock]
        inventory: InventoryItemConnection
        name: String!
        phone: String
        latitude: Float!
        longitude: Float!
        state: State!
        city: String!
        link: AWSURL
        street: String!
        zip: String!
        logo: AWSURL
        storefrontImage: AWSURL
        pickup: Boolean
        delivery: Boolean
        maxDays: Int
        drivers: StoreDrivers
        public: Boolean
        slug: String!
        metadata: String!

    }

    type StoreDrivers {
        
        id: ID
        firstname: String
        lastname: String

    }

    type StoreConnection {
        items: [Store]
        nextToken: String
    }

    input CreateStoreInput {
        companyId: ID!
        hours: AWSJSON
        name: String!
        phone: AWSPhone
        latitude: Float!
        longitude: Float!
        state: State!
        city: String!
        slug: String!
        link: AWSURL
        street: String!
        zip: String!
        logo: AWSURL
        storefrontImage: AWSURL
        pickup: Boolean
        delivery: Boolean
        maxDays: Int
        drivers: AWSJSON
        public: Boolean
        metadata: String!
    }

    input UpdateStoreInput {
        companyId: ID!
        id: ID!
        address: String
        hours: AWSJSON
        name: String
        latitude: Float
        longitude: Float
        state: State
        city: String
        street: String
        link: AWSURL
        zip: String
        phone: AWSPhone
        logo: AWSURL
        storefrontImage: AWSURL
        pickup: Boolean
        delivery: Boolean
        maxDays: Int
        drivers: AWSJSON
        public: Boolean
        metadata: String
    }

    input DeleteStoreInput {
        companyId: ID!
        id: ID!
    }

    input TableStoreFilterInput {
        city: TableStringFilterInput
        id: TableIDFilterInput
        inventory: TableStringFilterInput
        name: TableStringFilterInput
        zip: TableStringFilterInput
        pickup: TableBooleanFilterInput
        delivery: TableBooleanFilterInput
        public: TableBooleanFilterInput
    }

    type Option @aws_cognito_user_pools {
        
    amount: Float
    weight: WeightOptions

    }

    type InventoryItem @aws_cognito_user_pools {
        
        storeId: ID!
        id: ID!
        metadata: String!
        product: Product!
        productType: ProductType!
        image: AWSURL
        quantity: Float
        thc: String
        cbd: String
        description: String
        strainType: StrainType
        brand: String
        displayName: String
        price: Float
        options: [Option]
        isCannabisProduct: Boolean
        location: Geolocation
        createdAt: AWSTimestamp
        updatedAt: AWSTimestamp

    }

    type InventoryItemConnection @aws_cognito_user_pools {
        items: [InventoryItem]
        nextToken: String
    }

    
    input CreateInventoryItemInput {
        storeId: ID!
        metadata: String!
        product: String!
        options: AWSJSON
        quantity: Float
        productType: ProductType!
        thc: String
        cbd: String
        image: AWSURL
        description: String
        price: Float
        strainType: StrainType
        brand: String
        displayName: String
        isCannabisProduct: Boolean
        latitude: Float
        longitude: Float
        createdAt: AWSTimestamp!
        updatedAt: AWSTimestamp
        location: AWSJSON
    }

    input DeleteInventoryItemInput {
        storeId: ID!
        id: ID!
    }

    input UpdateInventoryItemInput {
        id: ID!
        storeId: ID!
        thc: String
        cbd: String
        options: AWSJSON
        productType: ProductType
        quantity: Float
        product: String
        image: AWSURL
        description: String
        price: Float
        strainType: StrainType
        brand: String
        displayName: String
        isCannabisProduct: Boolean
        latitude: Float
        longitude: Float
        updatedAt: AWSTimestamp
        location: AWSJSON
    }

    input UpdateStockInput {
        storeId: ID!
        id: ID!
        quantity: Float
        operator: String
    }

    input TableInventoryItemFilterInput {
        id: TableIDFilterInput
        product: TableStringFilterInput
        quantity: TableFloatFilterInput
        productType: TableStringFilterInput
        isCannabisProduct: TableBooleanFilterInput
    }

    
    type Product @aws_cognito_user_pools {
        
    id: ID!
    name: String!
    slug: String!

    }

    type ProductConnection {
        items: [Product]
        nextToken: String
    }

    
    input CreateProductInput {
        name: String!
        slug: String!
    }

    input UpdateProductInput {
        id: ID!
        name: String
        slug: String!
    }

    input ReviewProductInput {
        id: ID!
    }

    input DeleteProductInput {
        id: ID!
        slug: String!
    }

    input TableProductFilterInput {
        description: TableStringFilterInput
        id: TableIDFilterInput
        name: TableStringFilterInput
        slug: TableStringFilterInput
    }

    
    enum ProductType {
        Flower
        Concentrate
        Edible
        Topical
        PreRolls
    }

    enum StrainType {
        CBD
        HIGHCBD
        Hybrid
        Indica
        Sativa
    }

    enum WeightOptions {
        gram
        eighth
        quarter
        half
        ounce
    }

    enum State {
        NJ
    }

    enum Day {
    Sunday
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    }

    type timeblock {
        
    day: Day
    startTime: String
    endTime: String

    }

    type Order @aws_cognito_user_pools {
        
        id: ID!
        store: Store!
        customer: User!
        expectedCompletionDate: AWSTimestamp!
        createdAt: AWSTimestamp!
        status: OrderStatus!
        products: [OrderItem]!
        storeId: ID!
        customerId: ID!
        companyId: ID!
        discount: Float
        subtotal: Float!
        total: Float!
        tax: Float
        discountDisplayValue: String
        subtotalDisplayValue: String!
        taxDisplayValue: String
        totalDisplayValue: String!
        delivery: Boolean
        pickup: Boolean!
        pos: Boolean
        code: String!
       # driver: Driver
       # deliveryStatus: DeliveryStatus
       # dispensaryMessage: String

    }

    type OrderItem @aws_cognito_user_pools {
        
        item: InventoryItem!
        quantity: Int!
        option: Option
        requestedGrams: Float

    }

    type OrderConnection {
        items: [Order]
        nextToken: String
    }

    
    input CreateOrderInput {
        store: AWSJSON!
        customer: AWSJSON!
        total: Float!
        expectedCompletionDate: AWSTimestamp!
        createdAt: AWSTimestamp!
        status: OrderStatus!
        products: AWSJSON!
        storeId: ID!
        companyId: ID!
        customerId: ID!
        discount: Float
        subtotal: Float!
        code: String!
        tax: Float
        discountDisplayValue: String
        subtotalDisplayValue: String
        taxDisplayValue: String
        totalDisplayValue: String
        delivery: Boolean
        pickup: Boolean!
        pos: Boolean
        driver: String
        # deliveryStatus: DeliveryStatus
        # dispensaryMessage: String
    }

    input UpdateOrderInput {
        status: OrderStatus
        storeId: ID!
        # driver: String
        # deliveryStatus: DeliveryStatus
        # dispensaryMessage: String
        code: String!
    }

    input TableOrderFilterInput {
        id: TableIDFilterInput
        date: TableStringFilterInput
        status: TableStringFilterInput
        products: TableStringFilterInput
        customer: TableStringFilterInput
        store: TableStringFilterInput
        delivery: TableBooleanFilterInput
        code: TableStringFilterInput
        # driver: TableStringFilterInput
        # deliveryStatus: TableStringFilterInput
    }

    
    enum OrderStatus {
        new
        accepted
        rejected
        completed
    }

    type User @aws_cognito_user_pools {
        
        id: ID!
        confirmed: Boolean
        firstname: String
        lastname: String
        street: String
        city: String
        state: State
        patientID: String
        expiration: String
        email: AWSEmail
        phone: AWSPhone
        marketToken: String
        medToken: String
        stateId: String
        medCard: String
        marketWebToken: String

    }

    
    input CreateUserInput {
        id: ID!
        confirmed: Boolean
        firstname: String
        lastname: String
        patientID: String
        expiration: String
        email: AWSEmail
        phone: AWSPhone
        dob: String
        issued: String
        street: String
        city: String
        state: State
        marketToken: String
        medToken: String
        stateId: String
        medCard: String
        marketWebToken: String
    }

    input UpdateUserInput {
        id: ID!
        confirmed: Boolean
        firstname: String
        lastname: String
        patientID: String
        expiration: String
        email: AWSEmail
        phone: AWSPhone
        dob: String
        issued: String
        street: String
        city: String
        state: State
        marketToken: String
        medToken: String
        stateId: String
        medCard: String
        marketWebToken: String
    }

    
    type Geolocation @aws_cognito_user_pools {
        
    latitude: Float
    longitude: Float

    }
    
    type Mutation {
      
      createProduct(input: CreateProductInput!): Product
        @aws_auth(cognito_groups: ["Admin", "Dispensaries"])
      createStore(input: CreateStoreInput!): Store
        @aws_auth(cognito_groups: ["Admin", "Dispensaries"])
      updateStore(input: UpdateStoreInput!): Store
        @aws_auth(cognito_groups: ["Admin", "Dispensaries"])
      deleteStore(input: DeleteStoreInput): Store
        @aws_auth(cognito_groups: ["Admin", "Dispensaries"])
      createInventoryItem(input: CreateInventoryItemInput!): InventoryItem
        @aws_auth(cognito_groups: ["Admin", "Dispensaries"])
      updateInventoryItem(input: UpdateInventoryItemInput!): InventoryItem
        @aws_auth(cognito_groups: ["Admin", "Dispensaries"])
      deleteInventoryItem(input: DeleteInventoryItemInput!): InventoryItem
        @aws_auth(cognito_groups: ["Admin", "Dispensaries"])
      updateOrder(input: UpdateOrderInput): Order
        @aws_auth(cognito_groups: ["Admin", "Dispensaries"])
      createOrder(input: CreateOrderInput): Order @aws_cognito_user_pools
      updateStock(input: UpdateStockInput!): InventoryItem
        @aws_auth(cognito_groups: ["Admin", "Dispensaries"])

    }

    type Query {
        
        getProduct(slug: String!): Product
        getStore(id: ID!, companyId: ID!): Store
        getCompanyStores(companyId: ID!): StoreConnection
        getStoreInventory(
            storeId: ID!
            nextToken: String
            filter: TableInventoryItemFilterInput
        ): InventoryItemConnection
        getStoreInventoryWithFilters(            
            storeId: ID!
            metadata: String
            nextToken: String
            filter: TableInventoryItemFilterInput
        ): InventoryItemConnection
        getOrdersByStore(storeId: ID!): OrderConnection
        getOrdersByStoreAndDate(
            storeId: ID!
            from: AWSTimestamp!
            to: AWSTimestamp! 
            nextToken: String
            filter: TableOrderFilterInput
        ): OrderConnection
        getOrderByStoreAndCode(
            storeId: ID!
            code: String!
        ): Order

    }

    type Subscription {
        onCreateOrder(storeId: ID!): Order
            @aws_subscribe(mutations: ["createOrder"])

        onUpdateInventoryItemStock(id: ID!): InventoryItem
            @aws_subscribe(mutations: ["updateStock"])
    }

    schema {
      query: Query
      mutation: Mutation
      subscription: Subscription
    }
