{
  "service": {
    "service": "potluck-api-prod",
    "serviceObject": {
      "name": "potluck-api-prod"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "region": "us-east-1",
      "apiname": "potluck-api-prod",
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "StoreTableProd": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Description": "Data Store for AWS AppSync Store Type",
            "Properties": {
              "TableName": "store-table-prod",
              "AttributeDefinitions": [
                {
                  "AttributeName": "companyId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "companyId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "id",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "ProductTableProd": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Description": "Data Store for AWS AppSync Product Type",
            "Properties": {
              "TableName": "product-table-prod",
              "AttributeDefinitions": [
                {
                  "AttributeName": "slug",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "slug",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "InventoryTableProd": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Description": "Data Store for AWS AppSync Inventory Type",
            "Properties": {
              "TableName": "inventory-table-prod",
              "AttributeDefinitions": [
                {
                  "AttributeName": "storeId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "storeId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "createdAt",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "DoctorTableProd": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Description": "Data Store for AWS AppSync Doctor Type",
            "Properties": {
              "TableName": "doctor-table-prod",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "metadata",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "metadata-index",
                  "KeySchema": [
                    {
                      "AttributeName": "metadata",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                  }
                }
              ]
            }
          },
          "UserTableProd": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Description": "Data Store for AWS AppSync User Type",
            "Properties": {
              "TableName": "user-table-prod",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "AppSyncDynamoDBPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
              "Description": "Managed Policy to allow AWS AppSync to access tables in DynamoDB",
              "Path": "/appsync/",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:GetItem",
                      "dynamodb:PutItem",
                      "dynamodb:DeleteItem",
                      "dynamodb:UpdateItem",
                      "dynamodb:Query",
                      "dynamodb:Scan",
                      "dynamodb:BatchGetItem"
                    ],
                    "Resource": "arn:aws:dynamodb:us-east-1:*:*"
                  }
                ]
              }
            }
          },
          "DynamoDBRole": {
            "Type": "AWS::IAM::Role",
            "Description": "IAM Role for allowing AppSync to access DynamoDB",
            "DependsOn": [
              "AppSyncDynamoDBPolicy"
            ],
            "Properties": {
              "RoleName": "potluck-api-prod-appsync-dynamodb-role",
              "ManagedPolicyArns": [
                {
                  "Ref": "AppSyncDynamoDBPolicy"
                }
              ],
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sts:AssumeRole"
                    ],
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    }
                  }
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlApi": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
              "Name": "potluck-enterprise-prod",
              "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
              "AdditionalAuthenticationProviders": [],
              "UserPoolConfig": {
                "AwsRegion": "us-east-1",
                "UserPoolId": "us-east-1_ys3BakDVJ",
                "DefaultAction": "ALLOW"
              }
            }
          },
          "PotluckenterpriseprodGraphQlSchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
              "Definition": "\n  input TableBooleanFilterInput {\n    eq: Boolean\n    ne: Boolean\n  }\n\n  input TableFloatFilterInput {\n    between: [Float]\n    contains: Float\n    eq: Float\n    ge: Float\n    gt: Float\n    le: Float\n    lt: Float\n    ne: Float\n    notContains: Float\n  }\n\n  input TableIDFilterInput {\n    beginsWith: ID\n    between: [ID]\n    contains: ID\n    eq: ID\n    ge: ID\n    gt: ID\n    le: ID\n    lt: ID\n    ne: ID\n    notContains: ID\n  }\n\n  input TableIntFilterInput {\n    between: [Int]\n    contains: Int\n    eq: Int\n    ge: Int\n    gt: Int\n    le: Int\n    lt: Int\n    ne: Int\n    notContains: Int\n  }\n\n  input TableStringFilterInput {\n    beginsWith: String\n    between: [String]\n    contains: String\n    eq: String\n    ge: String\n    gt: String\n    le: String\n    lt: String\n    ne: String\n    notContains: String\n  }\n\n    type Store {\n        \n        id: ID!\n        companyId: ID!\n        hours: [timeblock]\n        inventory: InventoryItemConnection\n        name: String!\n        phone: String\n        latitude: Float!\n        longitude: Float!\n        state: State!\n        city: String!\n        link: AWSURL\n        street: String!\n        zip: String!\n        logo: AWSURL\n        storefrontImage: AWSURL\n        pickup: Boolean\n        delivery: Boolean\n        maxDays: Int\n        drivers: StoreDrivers\n        public: Boolean\n\n    }\n\n    type StoreDrivers {\n        \n        id: ID\n        firstname: String\n        lastname: String\n\n    }\n\n    type StoreConnection {\n        items: [Store]\n        nextToken: String\n    }\n\n    input CreateStoreInput {\n        companyId: ID!\n        hours: AWSJSON\n        name: String!\n        phone: AWSPhone\n        latitude: Float!\n        longitude: Float!\n        state: State!\n        city: String!\n        link: AWSURL\n        street: String!\n        zip: String!\n        logo: AWSURL\n        storefrontImage: AWSURL\n        pickup: Boolean\n        delivery: Boolean\n        maxDays: Int\n        drivers: AWSJSON\n        public: Boolean\n    }\n\n    input UpdateStoreInput {\n        companyId: ID!\n        id: ID!\n        address: String\n        hours: AWSJSON\n        name: String\n        latitude: Float\n        longitude: Float\n        state: State\n        city: String\n        street: String\n        link: AWSURL\n        zip: String\n        phone: AWSPhone\n        logo: AWSURL\n        storefrontImage: AWSURL\n        pickup: Boolean\n        delivery: Boolean\n        maxDays: Int\n        drivers: AWSJSON\n        public: Boolean\n    }\n\n    input DeleteStoreInput {\n        companyId: ID!\n        id: ID!\n    }\n\n    input TableStoreFilterInput {\n        city: TableStringFilterInput\n        id: TableIDFilterInput\n        inventory: TableStringFilterInput\n        name: TableStringFilterInput\n        zip: TableStringFilterInput\n        pickup: TableBooleanFilterInput\n        delivery: TableBooleanFilterInput\n        public: TableBooleanFilterInput\n    }\n\n    type Option {\n        \n    amount: Float\n    weight: WeightOptions\n\n    }\n\n    type InventoryItem {\n        \n        storeId: ID!\n        id: ID!\n        product: Product!\n        productType: ProductType!\n        image: AWSURL\n        quantity: Float\n        thc: String\n        cbd: String\n        description: String\n        strainType: StrainType\n        brand: String\n        displayName: String\n        price: Float\n        options: [Option]\n        isCannabisProduct: Boolean\n        latitude: Float\n        longitude: Float\n        createdAt: AWSTimestamp\n        updatedAt: AWSTimestamp\n\n    }\n\n    type InventoryItemConnection {\n        items: [InventoryItem]\n        nextToken: String\n    }\n\n    input CreateInventoryItemInput {\n        storeId: ID!\n        product: String!\n        options: AWSJSON\n        quantity: Float\n        productType: ProductType!\n        thc: String\n        cbd: String\n        image: AWSURL\n        description: String\n        price: Float\n        strainType: StrainType\n        brand: String\n        displayName: String\n        isCannabisProduct: Boolean\n        latitude: Float\n        longitude: Float\n        createdAt: AWSTimestamp!\n        updatedAt: AWSTimestamp\n    }\n\n    input DeleteInventoryItemInput {\n        storeId: ID!\n        createdAt: AWSTimestamp!\n    }\n\n    input UpdateInventoryItemInput {\n        storeId: ID!\n        thc: String\n        cbd: String\n        options: AWSJSON\n        productType: ProductType\n        quantity: Float\n        product: String\n        image: AWSURL\n        description: String\n        price: Float\n        strainType: StrainType\n        brand: String\n        displayName: String\n        isCannabisProduct: Boolean\n        latitude: Float\n        longitude: Float\n        createdAt: AWSTimestamp!\n        updatedAt: AWSTimestamp\n    }\n\n    input UpdateStockInput {\n        id: ID!\n        quantity: Float\n    }\n\n    input TableInventoryItemFilterInput {\n        id: TableIDFilterInput\n        product: TableStringFilterInput\n        quantity: TableFloatFilterInput\n        productType: TableStringFilterInput\n        isCannabisProduct: TableBooleanFilterInput\n    }\n\n    type Product {\n        \n    id: ID!\n    name: String!\n    slug: String!\n\n    }\n\n    type ProductConnection {\n        items: [Product]\n        nextToken: String\n    }\n\n    input CreateProductInput {\n        name: String!\n        slug: String!\n    }\n\n    input UpdateProductInput {\n        id: ID!\n        name: String\n        slug: String!\n    }\n\n    input ReviewProductInput {\n        id: ID!\n    }\n\n    input DeleteProductInput {\n        id: ID!\n        slug: String!\n    }\n\n    input TableProductFilterInput {\n        description: TableStringFilterInput\n        id: TableIDFilterInput\n        name: TableStringFilterInput\n        slug: TableStringFilterInput\n    }\n\n    enum ProductType {\n        Flower\n        Concentrate\n        Edible\n        Topical\n        PreRolls\n    }\n\n    enum StrainType {\n        CBD\n        Hybrid\n        Indica\n        Sativa\n    }\n\n    enum WeightOptions {\n        gram\n        eighth\n        quarter\n        half\n        ounce\n    }\n\n    enum State {\n        NJ\n    }\n\n    enum Day {\n    Sunday\n    Monday\n    Tuesday\n    Wednesday\n    Thursday\n    Friday\n    Saturday\n    }\n\n    type timeblock {\n        \n    day: Day\n    startTime: String\n    endTime: String\n\n    }\n\n    type Mutation {\n      createProduct(input: CreateProductInput!): Product\n        @aws_auth(cognito_groups: [\"Admin\", \"Dispensaries\"])\n      createStore(input: CreateStoreInput!): Store\n        @aws_auth(cognito_groups: [\"Admin\", \"Dispensaries\"])\n      updateStore(input: UpdateStoreInput!): Store\n        @aws_auth(cognito_groups: [\"Admin\", \"Dispensaries\"])\n      deleteStore(input: DeleteStoreInput): Store\n        @aws_auth(cognito_groups: [\"Admin\", \"Dispensaries\"])\n      createInventoryItem(input: CreateInventoryItemInput!): InventoryItem\n        @aws_auth(cognito_groups: [\"Admin\", \"Dispensaries\"])\n      updateInventoryItem(input: UpdateInventoryItemInput!): InventoryItem\n        @aws_auth(cognito_groups: [\"Admin\", \"Dispensaries\"])\n      deleteInventoryItem(input: DeleteInventoryItemInput!): InventoryItem\n        @aws_auth(cognito_groups: [\"Admin\", \"Dispensaries\"])\n    }\n\n    type Query {\n        getProduct(slug: String!): Product\n        getStore(id: ID!, companyId: ID!): Store\n        getCompanyStores(companyId: ID!): StoreConnection\n        getStoreInventory(\n            storeId: ID!\n            nextToken: String\n            filter: TableInventoryItemFilterInput\n        ): InventoryItemConnection\n    }\n\n    schema {\n      query: Query\n      mutation: Mutation\n      #   subscription: Subscription\n    }\n",
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlDsProductTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "ProductTableProd",
              "Description": "Product Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "product-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckenterpriseprodGraphQlDsStoreTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "StoreTableProd",
              "Description": "Store Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "store-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckenterpriseprodGraphQlDsInventoryTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "InventoryTableProd",
              "Description": "Inventory Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "inventory-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverMutationcreateStore": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createStore",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($ctx.args.input),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsStoreTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverMutationupdateStore": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateStore",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id),\n    \"companyId\": $util.dynamodb.toDynamoDBJson($ctx.args.input.companyId),\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\", \"companyId\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"attribute_exists(#id) and contains(companyId, :expectedOwner)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n    \"expressionValues\": {\n      \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n    }\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsStoreTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverMutationdeleteStore": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteStore",
              "RequestMappingTemplate": "#if($ctx.args.input.companyId == $context.identity.username)\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": {\n    \"companyId\": $util.dynamodb.toDynamoDBJson($ctx.args.input.companyId),\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n}\n#else\n    $utils.unauthorized()\n#end\n",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsStoreTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverQuerygetStore": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getStore",
              "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"companyId\": $util.dynamodb.toDynamoDBJson($ctx.args.companyId),\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n    }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsStoreTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverQuerygetCompanyStores": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getCompanyStores",
              "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#companyId = :companyId\",\n        \"expressionNames\" : {\n            \"#companyId\": \"companyId\",\n        },\n        \"expressionValues\" : {\n            \":companyId\": { \"S\" : \"$context.args.companyId\" },\n        }\n    },\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"scanIndexForward\" : false,\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsStoreTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverMutationcreateInventoryItem": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createInventoryItem",
              "RequestMappingTemplate": "#set( $args  = $ctx.args.input )\n#set($argsWithOwner = $args.put(\"owner\", ${context.identity.username}))\n\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\" : $util.dynamodb.toMapValuesJson($args),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsInventoryTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverMutationdeleteInventoryItem": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteInventoryItem",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": {\n    \"storeId\": $util.dynamodb.toDynamoDBJson($ctx.args.input.storeId),\n    \"createdAt\": $util.dynamodb.toDynamoDBJson($ctx.args.input.createdAt)\n  },\n  \"condition\" : {\n      \"expression\": \"contains(#owner, :expectedOwner)\",\n        \"expressionNames\": {\n          \"#owner\": \"owner\"\n      },\n      \"expressionValues\": {\n        \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n      }\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsInventoryTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverMutationupdateInventoryItem": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateInventoryItem",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"storeId\": $util.dynamodb.toDynamoDBJson($ctx.args.input.storeId),\n    \"createdAt\": $util.dynamodb.toDynamoDBJson($ctx.args.input.createdAt)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\", \"storeId\", \"createdAt\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n   \"condition\" : {\n      \"expression\": \"contains(#owner, :expectedOwner)\",\n        \"expressionNames\": {\n          \"#owner\": \"owner\"\n      },\n      \"expressionValues\": {\n        \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n      }\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsInventoryTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverQuerygetStoreInventory": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getStoreInventory",
              "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#storeId = :storeId AND #timestamp >= :timestamp\",\n        \"expressionNames\" : {\n            \"#storeId\": \"storeId\",\n            \"#timestamp\": \"createdAt\"\n        },\n        \"expressionValues\" : {\n            \":storeId\": { \"S\" : \"$context.args.storeId\" },\n            \":timestamp\": { \"N\" : 0 }\n        }\n    },\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"scanIndexForward\" : false,\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsInventoryTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverInventoryItemproduct": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "InventoryItem",
              "FieldName": "product",
              "RequestMappingTemplate": "## Below example shows how to look up an item with a Primary Key of \"id\" from GraphQL arguments\n## The helper $util.dynamodb.toDynamoDBJson automatically converts to a DynamoDB formatted request\n## There is a \"context\" object with arguments, identity, headers, and parent field information you can access. \n## It also has a shorthand notation avaialable:\n##  - $context or $ctx is the root object\n##  - $ctx.arguments or $ctx.args contains arguments\n##  - $ctx.identity has caller information, such as $ctx.identity.username\n##  - $ctx.request.headers contains headers, such as $context.request.headers.xyz\n##  - $ctx.source is a map of the parent field, for instance $ctx.source.xyz\n## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html\n\n{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"slug\": $util.dynamodb.toDynamoDBJson($ctx.source.product),\n    }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsProductTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverMutationcreateProduct": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createProduct",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($ctx.args.input),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsProductTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckenterpriseprodGraphQlResolverQuerygetProduct": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckenterpriseprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getProduct",
              "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"slug\": $util.dynamodb.toDynamoDBJson($ctx.args.slug)\n    }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckenterpriseprodGraphQlDsProductTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmarketapiprodGraphQlApi": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
              "Name": "potluck-market-api-prod",
              "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
              "AdditionalAuthenticationProviders": [
                {
                  "AuthenticationType": "API_KEY"
                }
              ],
              "UserPoolConfig": {
                "AwsRegion": "us-east-1",
                "UserPoolId": "us-east-1_CwBA0oPZ3",
                "DefaultAction": "ALLOW"
              }
            }
          },
          "PotluckmarketapiprodGraphQlApiKeyDefault": {
            "Type": "AWS::AppSync::ApiKey",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Description": "serverless-appsync-plugin: AppSync API Key for PotluckmarketapiprodGraphQlApiKeyDefault",
              "Expires": 1603681194
            }
          },
          "PotluckmarketapiprodGraphQlSchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
              "Definition": "\n  input TableBooleanFilterInput {\n    eq: Boolean\n    ne: Boolean\n  }\n\n  input TableFloatFilterInput {\n    between: [Float]\n    contains: Float\n    eq: Float\n    ge: Float\n    gt: Float\n    le: Float\n    lt: Float\n    ne: Float\n    notContains: Float\n  }\n\n  input TableIDFilterInput {\n    beginsWith: ID\n    between: [ID]\n    contains: ID\n    eq: ID\n    ge: ID\n    gt: ID\n    le: ID\n    lt: ID\n    ne: ID\n    notContains: ID\n  }\n\n  input TableIntFilterInput {\n    between: [Int]\n    contains: Int\n    eq: Int\n    ge: Int\n    gt: Int\n    le: Int\n    lt: Int\n    ne: Int\n    notContains: Int\n  }\n\n  input TableStringFilterInput {\n    beginsWith: String\n    between: [String]\n    contains: String\n    eq: String\n    ge: String\n    gt: String\n    le: String\n    lt: String\n    ne: String\n    notContains: String\n  }\n\n    enum County {\n    Atlantic\n    Bergen\n    Burlington\n    Camden\n    Capemay\n    Cumberland\n    Essex\n    Gloucester\n    Hudson\n    Hunterdon\n    Mercer\n    Middlesex\n    Monmouth\n    Morris\n    Ocean\n    Passaic\n    Salem\n    Somerset\n    Sussex\n    Union\n    Warren\n    }\n\n    enum State {\n        NJ\n    }\n\n    enum Day {\n    Sunday\n    Monday\n    Tuesday\n    Wednesday\n    Thursday\n    Friday\n    Saturday\n    }\n\n    enum ProductType {\n        Flower\n        Concentrate\n        Edible\n        Topical\n        PreRolls\n    }\n\n    enum StrainType {\n        CBD\n        Hybrid\n        Indica\n        Sativa\n    }\n\n    enum WeightOptions {\n        gram\n        eighth\n        quarter\n        half\n        ounce\n    }\n\n    type Doctor @aws_api_key @aws_cognito_user_pools {\n        \n    id: ID!\n    address: String!\n    county: County!\n    metadata: String!\n    hours: [String]\n    latitude: String!\n    longitude: String!\n    name: String!\n    newPatients: Boolean\n    phone: String\n    specialty: String!\n    receiveChats: Boolean\n    bio: String\n    image: AWSURL\n    insuranceAccpeted: Boolean\n    firstVisit: String\n    followUp: String\n    renewal: String\n    bookingFee: String\n    visitLength: String\n    marketToken: String\n    medToken: String\n\n    }\n\n    type DoctorConnection @aws_api_key @aws_cognito_user_pools {\n        items: [Doctor]\n        nextToken: String\n    }\n\n    \n    input TableDoctorFilterInput {\n        address: TableStringFilterInput\n        hours: TableStringFilterInput\n        name: TableStringFilterInput\n        newPatients: TableBooleanFilterInput\n        county: TableStringFilterInput\n    }\n\n    input UpdateDoctorInput {\n        id: ID!\n        address: String\n        hours: [String]\n        name: String\n        phone: String\n        receiveChats: Boolean\n        bio: String\n        image: AWSURL\n        firstVisit: String\n        followUp: String\n        renewal: String\n        bookingFee: String\n        visitLength: String\n        insuranceAccpeted: Boolean\n        metadata: String\n        marketToken: String\n        medToken: String\n    }\n\n    input CreateDoctorInput {\n        id: String!\n        address: String!\n        county: String!\n        hours: AWSJSON\n        latitude: String!\n        longitude: String!\n        metadata: String!\n        name: String!\n        newPatients: Boolean!\n        phone: String\n        specialty: String!\n        receiveChats: Boolean\n        pricePerVisit: String\n        bio: String\n        image: AWSURL\n        firstVisit: String\n        followUp: String\n        renewal: String\n        bookingFee: String\n        visitLength: String\n        insuranceAccpeted: Boolean\n        marketToken: String\n        medToken: String\n    }\n\n    \n    type StoreDrivers @aws_api_key @aws_cognito_user_pools {\n        \n        id: ID\n        firstname: String\n        lastname: String\n\n    }\n\n    type Store @aws_api_key @aws_cognito_user_pools {\n        \n        id: ID!\n        companyId: ID!\n        hours: [timeblock]\n        inventory: InventoryItemConnection\n        name: String!\n        phone: String\n        latitude: Float!\n        longitude: Float!\n        state: State!\n        city: String!\n        link: AWSURL\n        street: String!\n        zip: String!\n        logo: AWSURL\n        storefrontImage: AWSURL\n        pickup: Boolean\n        delivery: Boolean\n        maxDays: Int\n        drivers: StoreDrivers\n        public: Boolean\n\n    }\n\n    type StoreConnection @aws_api_key @aws_cognito_user_pools {\n        items: [Store]\n        nextToken: String\n    }\n\n    \n    input CreateStoreInput {\n        companyId: ID!\n        hours: AWSJSON\n        name: String!\n        phone: AWSPhone\n        latitude: Float!\n        longitude: Float!\n        state: State!\n        city: String!\n        link: AWSURL\n        street: String!\n        zip: String!\n        logo: AWSURL\n        storefrontImage: AWSURL\n        pickup: Boolean\n        delivery: Boolean\n        maxDays: Int\n        drivers: AWSJSON\n        public: Boolean\n    }\n\n    input UpdateStoreInput {\n        companyId: ID!\n        id: ID!\n        address: String\n        hours: AWSJSON\n        name: String\n        latitude: Float\n        longitude: Float\n        state: State\n        city: String\n        street: String\n        link: AWSURL\n        zip: String\n        phone: AWSPhone\n        logo: AWSURL\n        storefrontImage: AWSURL\n        pickup: Boolean\n        delivery: Boolean\n        maxDays: Int\n        drivers: AWSJSON\n        public: Boolean\n    }\n\n    input DeleteStoreInput {\n        companyId: ID!\n        id: ID!\n    }\n\n    input TableStoreFilterInput {\n        city: TableStringFilterInput\n        id: TableIDFilterInput\n        inventory: TableStringFilterInput\n        name: TableStringFilterInput\n        zip: TableStringFilterInput\n        pickup: TableBooleanFilterInput\n        delivery: TableBooleanFilterInput\n        public: TableBooleanFilterInput\n    }\n\n\n    \n    type Product @aws_api_key @aws_cognito_user_pools {\n        \n    id: ID!\n    name: String!\n    slug: String!\n\n    }\n\n    type ProductConnection {\n        items: [Product]\n        nextToken: String\n    }\n\n    \n    input CreateProductInput {\n        name: String!\n        slug: String!\n    }\n\n    input UpdateProductInput {\n        id: ID!\n        name: String\n        slug: String!\n    }\n\n    input ReviewProductInput {\n        id: ID!\n    }\n\n    input DeleteProductInput {\n        id: ID!\n        slug: String!\n    }\n\n    input TableProductFilterInput {\n        description: TableStringFilterInput\n        id: TableIDFilterInput\n        name: TableStringFilterInput\n        slug: TableStringFilterInput\n    }\n\n    \n    type Option @aws_api_key @aws_cognito_user_pools {\n        \n    amount: Float\n    weight: WeightOptions\n\n    }\n\n    type InventoryItem @aws_api_key @aws_cognito_user_pools {\n        \n        storeId: ID!\n        id: ID!\n        product: Product!\n        productType: ProductType!\n        image: AWSURL\n        quantity: Float\n        thc: String\n        cbd: String\n        description: String\n        strainType: StrainType\n        brand: String\n        displayName: String\n        price: Float\n        options: [Option]\n        isCannabisProduct: Boolean\n        latitude: Float\n        longitude: Float\n        createdAt: AWSTimestamp\n        updatedAt: AWSTimestamp\n\n    }\n\n    type InventoryItemConnection @aws_api_key @aws_cognito_user_pools {\n        items: [InventoryItem]\n        nextToken: String\n    }\n\n    \n    input CreateInventoryItemInput {\n        storeId: ID!\n        product: String!\n        options: AWSJSON\n        quantity: Float\n        productType: ProductType!\n        thc: String\n        cbd: String\n        image: AWSURL\n        description: String\n        price: Float\n        strainType: StrainType\n        brand: String\n        displayName: String\n        isCannabisProduct: Boolean\n        latitude: Float\n        longitude: Float\n        createdAt: AWSTimestamp!\n        updatedAt: AWSTimestamp\n    }\n\n    input DeleteInventoryItemInput {\n        storeId: ID!\n        createdAt: AWSTimestamp!\n    }\n\n    input UpdateInventoryItemInput {\n        storeId: ID!\n        thc: String\n        cbd: String\n        options: AWSJSON\n        productType: ProductType\n        quantity: Float\n        product: String\n        image: AWSURL\n        description: String\n        price: Float\n        strainType: StrainType\n        brand: String\n        displayName: String\n        isCannabisProduct: Boolean\n        latitude: Float\n        longitude: Float\n        createdAt: AWSTimestamp!\n        updatedAt: AWSTimestamp\n    }\n\n    input UpdateStockInput {\n        id: ID!\n        quantity: Float\n    }\n\n    input TableInventoryItemFilterInput {\n        id: TableIDFilterInput\n        product: TableStringFilterInput\n        quantity: TableFloatFilterInput\n        productType: TableStringFilterInput\n        isCannabisProduct: TableBooleanFilterInput\n    }\n\n    \n    type User @aws_api_key @aws_cognito_user_pools {\n        \n        id: ID!\n        confirmed: Boolean\n        firstname: String\n        lastname: String\n        street: String\n        city: String\n        state: State\n        patientID: String\n        expiration: String\n        email: AWSEmail\n        phone: AWSPhone\n        marketToken: String\n        medToken: String\n\n    }\n\n    \n    input CreateUserInput {\n        id: ID!\n        confirmed: Boolean\n        firstname: String\n        lastname: String\n        patientID: String\n        expiration: String\n        email: AWSEmail\n        phone: AWSPhone\n        dob: String\n        issued: String\n        street: String\n        city: String\n        state: State\n        marketToken: String\n        medToken: String\n    }\n\n    input UpdateUserInput {\n        id: ID!\n        confirmed: Boolean\n        firstname: String\n        lastname: String\n        patientID: String\n        expiration: String\n        email: AWSEmail\n        phone: AWSPhone\n        dob: String\n        issued: String\n        street: String\n        city: String\n        state: State\n        marketToken: String\n        medToken: String\n    }\n\n    \n        type timeblock @aws_api_key @aws_cognito_user_pools {\n            \n    day: Day\n    startTime: String\n    endTime: String\n\n        }\n    \n    type Mutation {\n        createDoctor(input: CreateDoctorInput!): Doctor\n            @aws_auth(cognito_groups: [\"Doctor\"])\n\n        updateDoctor(input: UpdateDoctorInput!): Doctor\n            @aws_auth(cognito_groups: [\"Doctor\"])\n\n        createUser(input: CreateUserInput!): User @aws_cognito_user_pools\n\n        updateUser(input: UpdateUserInput!): User @aws_cognito_user_pools\n    }\n\n    type Query {\n        getDoctor(id: ID!): Doctor @aws_cognito_user_pools\n\n        getUser(id: ID!): User @aws_cognito_user_pools\n\n        listStores(\n            filter: TableStoreFilterInput\n            limit: Int\n            nextToken: String\n        ): StoreConnection @aws_api_key @aws_cognito_user_pools\n    }\n\n    schema {\n      query: Query\n      mutation: Mutation\n    }\n",
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              }
            }
          },
          "PotluckmarketapiprodGraphQlDsProductTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "ProductTableProd",
              "Description": "Product Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "product-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckmarketapiprodGraphQlDsStoreTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "StoreTableProd",
              "Description": "Store Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "store-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckmarketapiprodGraphQlDsInventoryTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "InventoryTableProd",
              "Description": "Inventory Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "inventory-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckmarketapiprodGraphQlDsDoctorTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "DoctorTableProd",
              "Description": "DynamoDB Doctor Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "doctor-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckmarketapiprodGraphQlDsUserTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "UserTableProd",
              "Description": "DynamoDB User Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "user-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckmarketapiprodGraphQlResolverQuerylistStores": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmarketapiprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listStores",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"Scan\",\n  \"filter\": #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n  \"limit\": $util.defaultIfNull($ctx.args.limit, 20),\n  \"nextToken\": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlDsStoreTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmarketapiprodGraphQlResolverStoreinventory": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmarketapiprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Store",
              "FieldName": "inventory",
              "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#storeId = :storeId AND #timestamp >= :timestamp\",\n        \"expressionNames\" : {\n            \"#storeId\": \"storeId\",\n            \"#timestamp\": \"createdAt\"\n        },\n        \"expressionValues\" : {\n            \":storeId\": { \"S\" : \"$ctx.source.id\" },\n            \":timestamp\": { \"N\" : 0 }\n        }\n    },\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"scanIndexForward\" : false,\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlDsInventoryTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmarketapiprodGraphQlResolverInventoryItemproduct": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmarketapiprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "InventoryItem",
              "FieldName": "product",
              "RequestMappingTemplate": "## Below example shows how to look up an item with a Primary Key of \"id\" from GraphQL arguments\n## The helper $util.dynamodb.toDynamoDBJson automatically converts to a DynamoDB formatted request\n## There is a \"context\" object with arguments, identity, headers, and parent field information you can access. \n## It also has a shorthand notation avaialable:\n##  - $context or $ctx is the root object\n##  - $ctx.arguments or $ctx.args contains arguments\n##  - $ctx.identity has caller information, such as $ctx.identity.username\n##  - $ctx.request.headers contains headers, such as $context.request.headers.xyz\n##  - $ctx.source is a map of the parent field, for instance $ctx.source.xyz\n## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html\n\n{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"slug\": $util.dynamodb.toDynamoDBJson($ctx.source.product),\n    }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlDsProductTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmarketapiprodGraphQlResolverQuerygetDoctor": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmarketapiprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getDoctor",
              "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id),\n    }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlDsDoctorTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmarketapiprodGraphQlResolverMutationcreateDoctor": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmarketapiprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createDoctor",
              "RequestMappingTemplate": "#set( $args  = $ctx.args.input )\n#set($argsWithOwner = $args.put(\"owner\", ${context.identity.username}))\n\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\" : $util.dynamodb.toMapValuesJson($args),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlDsDoctorTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmarketapiprodGraphQlResolverMutationupdateDoctor": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmarketapiprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateDoctor",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n   \"condition\" : {\n      \"expression\": \"contains(#owner, :expectedOwner)\",\n        \"expressionNames\": {\n          \"#owner\": \"owner\"\n      },\n      \"expressionValues\": {\n        \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n      }\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlDsDoctorTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmarketapiprodGraphQlResolverQuerygetUser": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmarketapiprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getUser",
              "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id),\n    }\n}",
              "ResponseMappingTemplate": "#if($context.result[\"owner\"] == $context.identity.username)\n    $utils.toJson($context.result);\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlDsUserTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmarketapiprodGraphQlResolverMutationcreateUser": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmarketapiprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createUser",
              "RequestMappingTemplate": "#set( $args  = $ctx.args.input )\n#set($argsWithOwner = $args.put(\"owner\", ${context.identity.username}))\n\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\" : $util.dynamodb.toMapValuesJson($args),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlDsUserTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmarketapiprodGraphQlResolverMutationupdateUser": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmarketapiprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateUser",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n   \"condition\" : {\n      \"expression\": \"contains(#owner, :expectedOwner)\",\n        \"expressionNames\": {\n          \"#owner\": \"owner\"\n      },\n      \"expressionValues\": {\n        \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n      }\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmarketapiprodGraphQlDsUserTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlApi": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
              "Name": "potluck-med-prod",
              "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
              "AdditionalAuthenticationProviders": [],
              "UserPoolConfig": {
                "AwsRegion": "us-east-1",
                "UserPoolId": "us-east-1_CwBA0oPZ3",
                "DefaultAction": "ALLOW"
              }
            }
          },
          "PotluckmedprodGraphQlSchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
              "Definition": "\n  input TableBooleanFilterInput {\n    eq: Boolean\n    ne: Boolean\n  }\n\n  input TableFloatFilterInput {\n    between: [Float]\n    contains: Float\n    eq: Float\n    ge: Float\n    gt: Float\n    le: Float\n    lt: Float\n    ne: Float\n    notContains: Float\n  }\n\n  input TableIDFilterInput {\n    beginsWith: ID\n    between: [ID]\n    contains: ID\n    eq: ID\n    ge: ID\n    gt: ID\n    le: ID\n    lt: ID\n    ne: ID\n    notContains: ID\n  }\n\n  input TableIntFilterInput {\n    between: [Int]\n    contains: Int\n    eq: Int\n    ge: Int\n    gt: Int\n    le: Int\n    lt: Int\n    ne: Int\n    notContains: Int\n  }\n\n  input TableStringFilterInput {\n    beginsWith: String\n    between: [String]\n    contains: String\n    eq: String\n    ge: String\n    gt: String\n    le: String\n    lt: String\n    ne: String\n    notContains: String\n  }\n\n    enum County {\n    Atlantic\n    Bergen\n    Burlington\n    Camden\n    Capemay\n    Cumberland\n    Essex\n    Gloucester\n    Hudson\n    Hunterdon\n    Mercer\n    Middlesex\n    Monmouth\n    Morris\n    Ocean\n    Passaic\n    Salem\n    Somerset\n    Sussex\n    Union\n    Warren\n    }\n\n    enum State {\n        NJ\n    }\n\n    enum AppointmentStatus {\n        pending\n        confirmed\n        cancelled\n    }\n\n    enum SortDirection {\n        ASC\n        DESC\n    }\n\n    type Doctor {\n        \n    id: ID!\n    address: String!\n    county: County!\n    metadata: String!\n    hours: [String]\n    latitude: String!\n    longitude: String!\n    name: String!\n    newPatients: Boolean\n    phone: String\n    specialty: String!\n    receiveChats: Boolean\n    bio: String\n    image: AWSURL\n    insuranceAccpeted: Boolean\n    firstVisit: String\n    followUp: String\n    renewal: String\n    bookingFee: String\n    visitLength: String\n    marketToken: String\n    medToken: String\n\n    }\n\n    type DoctorConnection {\n        items: [Doctor]\n        nextToken: String\n    }\n\n    input TableDoctorFilterInput {\n        address: TableStringFilterInput\n        hours: TableStringFilterInput\n        name: TableStringFilterInput\n        newPatients: TableBooleanFilterInput\n        county: TableStringFilterInput\n    }\n\n    input UpdateDoctorInput {\n        id: ID!\n        address: String\n        hours: [String]\n        name: String\n        phone: String\n        receiveChats: Boolean\n        bio: String\n        image: AWSURL\n        firstVisit: String\n        followUp: String\n        renewal: String\n        bookingFee: String\n        visitLength: String\n        insuranceAccpeted: Boolean\n        metadata: String\n        marketToken: String\n        medToken: String\n    }\n\n    input CreateDoctorInput {\n        id: String!\n        address: String!\n        county: String!\n        hours: AWSJSON\n        latitude: String!\n        longitude: String!\n        metadata: String!\n        name: String!\n        newPatients: Boolean!\n        phone: String\n        specialty: String!\n        receiveChats: Boolean\n        pricePerVisit: String\n        bio: String\n        image: AWSURL\n        firstVisit: String\n        followUp: String\n        renewal: String\n        bookingFee: String\n        visitLength: String\n        insuranceAccpeted: Boolean\n        marketToken: String\n        medToken: String\n    }\n\n    type Appointment {\n        id: ID!\n        doctor: Doctor!\n        patient: User!\n        doctorId: ID!\n        patientId: ID!\n        createdAt: AWSTimestamp!\n        updatedAt: AWSTimestamp\n        status: AppointmentStatus!\n        date: AWSTimestamp!\n    }\n\n    type AppointmentConnection {\n        items: [Appointment]\n        nextToken: String\n    }\n\n    input CreateAppointmentInput {\n        doctor: AWSJSON!\n        patient: AWSJSON!\n        createdAt: AWSTimestamp!\n        updatedAt: AWSTimestamp\n        status: AppointmentStatus!\n        date: AWSTimestamp\n        doctorId: ID!\n        patientId: ID!\n    }\n\n    input TableAppointmentFilterInput {\n        doctor: TableStringFilterInput\n        patient: TableStringFilterInput\n        status: TableStringFilterInput\n        date: TableIntFilterInput\n        doctorId: TableStringFilterInput\n        patientID: TableStringFilterInput\n    }\n\n    input UpdateAppointmentInput {\n        id: ID!\n        status: AppointmentStatus\n    }\n\n    type User {\n        \n        id: ID!\n        confirmed: Boolean\n        firstname: String\n        lastname: String\n        street: String\n        city: String\n        state: State\n        patientID: String\n        expiration: String\n        email: AWSEmail\n        phone: AWSPhone\n        marketToken: String\n        medToken: String\n\n    }\n\n    input CreateUserInput {\n        id: ID!\n        confirmed: Boolean\n        firstname: String\n        lastname: String\n        patientID: String\n        expiration: String\n        email: AWSEmail\n        phone: AWSPhone\n        dob: String\n        issued: String\n        street: String\n        city: String\n        state: State\n        marketToken: String\n        medToken: String\n    }\n\n    input UpdateUserInput {\n        id: ID!\n        confirmed: Boolean\n        firstname: String\n        lastname: String\n        patientID: String\n        expiration: String\n        email: AWSEmail\n        phone: AWSPhone\n        dob: String\n        issued: String\n        street: String\n        city: String\n        state: State\n        marketToken: String\n        medToken: String\n    }\n\n    type Conversation {\n        id: ID!\n        createdAt: AWSTimestamp\n        updatedAt: AWSTimestamp\n        patient: User!\n        doctor: Doctor!\n        patientId: ID!\n        doctorId: ID!\n        didDoctorRead: Boolean\n        didPatientRead: Boolean\n        messages(\n            filter: TableMessageFilterInput\n            sortDirection: SortDirection\n            startFromTime: Int\n            limit: Int\n            nextToken: String\n        ): MessageConnection\n    }\n\n    type ConversationConnection {\n        items: [Conversation]\n        nextToken: String\n    }\n\n    input CreateConversationInput {\n        createdAt: AWSTimestamp\n        updatedAt: AWSTimestamp\n        patientId: ID!\n        doctorId: ID!\n        patient: AWSJSON!\n        doctor: AWSJSON!\n        didDoctorRead: Boolean\n        didPatientRead: Boolean\n    }\n\n    input UpdateConversationInput {\n        id: ID!\n        updatedAt: AWSTimestamp\n        didDoctorRead: Boolean\n        didPatientRead: Boolean\n    }\n\n    input TableConversationFilterInput {\n        id: TableIDFilterInput\n        doctorId: TableIDFilterInput\n        patientId: TableIDFilterInput\n    }   \n\n    type Message {\n        id: ID!\n        text: String!\n        #  The id of the Conversation this message belongs to. This is the table primary key.\n        conversationId: ID!\n        #  The message timestamp. This is also the table sort key.\n        createdAt: AWSTimestamp\n        isSent: Boolean\n        sender: String\n    }\n\n    type MessageConnection {\n        items: [Message]\n        nextToken: String\n    }\n\n    input CreateMessageInput {\n        conversationId: ID!\n        createdAt: AWSTimestamp\n        sender: String\n        isSent: Boolean\n        text: String!\n        patientId: ID!\n        doctorId: ID!\n    }\n\n    input TableMessageFilterInput {\n        conversationId: TableIDFilterInput\n        createdAt: TableIntFilterInput\n        sender: TableStringFilterInput\n        isSent: TableBooleanFilterInput\n        text: TableStringFilterInput\n    }\n\n    type Mutation {\n        createAppointment(input: CreateAppointmentInput): Appointment\n            @aws_auth(cognito_groups: [\"Doctor\"])\n\n        updateAppointment(input: UpdateAppointmentInput): Appointment\n\n        createMessage(input: CreateMessageInput): Message\n\n        createConversation(input: CreateConversationInput): Conversation\n\n        updateConversation(input: UpdateConversationInput): Conversation\n\n        createUser(input: CreateUserInput!): User\n\n        updateUser(input: UpdateUserInput!): User\n\n        updateDoctor(input: UpdateDoctorInput!): Doctor\n            @aws_auth(cognito_groups: [\"Doctor\"])\n    }\n\n    type Query {\n        listDoctors(\n            filter: TableDoctorFilterInput\n            limit: Int\n            nextToken: String\n        ): DoctorConnection\n\n        getDoctorsByCounty(metadata: String!, nextToken: String): DoctorConnection\n\n        getDoctor(id: ID!): Doctor\n\n        getUser(id: ID!): User\n\n        getAppointment(id: ID!): Appointment\n\n        getAppointmentsByPatient(\n            patientId: ID!\n            filter: TableAppointmentFilterInput\n        ): AppointmentConnection\n\n        getAppointmentsByDoctor(\n            doctorId: ID!\n            from: AWSTimestamp!\n            to: AWSTimestamp!\n            filter: TableAppointmentFilterInput\n        ): AppointmentConnection\n\n        getConversation(id: ID!, filter: TableConversationFilterInput): Conversation\n\n        getConversationsByDoctor(\n            doctorId: ID!\n            filter: TableConversationFilterInput\n        ): ConversationConnection\n\n        getConversationsByPatient(\n            patientId: ID!\n            filter: TableConversationFilterInput\n        ): ConversationConnection\n\n        getMessagesFromAConversation(\n            conversationId: ID!\n            filter: TableMessageFilterInput\n            sortDirection: SortDirection\n            startFromTime: Int\n            limit: Int\n            nextToken: String\n        ): MessageConnection\n    }\n\n    type Subscription {\n        onUpdateConversation(patientId: ID, doctorId: ID): Conversation\n            @aws_subscribe(mutations: [\"updateConversation\"])\n\n        onCreateMessage(conversationId: ID): Message\n            @aws_subscribe(mutations: [\"createMessage\"])\n    }\n\n    schema {\n      query: Query\n      mutation: Mutation\n      subscription: Subscription\n    }\n",
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlDsDoctorTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "DoctorTableProd",
              "Description": "Doctor Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "doctor-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckmedprodGraphQlDsUserTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "UserTableProd",
              "Description": "DynamoDB User Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "user-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckmedprodGraphQlDsAppointmentTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "AppointmentTableProd",
              "Description": "Appointment Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "appointment-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckmedprodGraphQlDsConversationTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "ConversationTableProd",
              "Description": "Conversation Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "conversation-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckmedprodGraphQlDsMessageTableProd": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "MessageTableProd",
              "Description": "Message Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "DynamoDBRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "us-east-1",
                "TableName": "message-table-prod",
                "UseCallerCredentials": false
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerygetDoctor": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getDoctor",
              "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id),\n    }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsDoctorTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerylistDoctors": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listDoctors",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"Scan\",\n  \"filter\": #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n  \"limit\": $util.defaultIfNull($ctx.args.limit, 20),\n  \"nextToken\": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsDoctorTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerygetDoctorsByCounty": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getDoctorsByCounty",
              "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#metadata = :metadata\",\n        \"expressionNames\" : {\n            \"#metadata\": \"metadata\"\n        },\n        \"expressionValues\" : {\n            \":metadata\": { \"S\" : \"$context.args.metadata\" }\n        }\n    },\n    \"index\": \"metadata-index\",\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"scanIndexForward\" : false,\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsDoctorTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerygetUser": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getUser",
              "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id),\n    }\n}",
              "ResponseMappingTemplate": "#if($context.result[\"owner\"] == $context.identity.username)\n    $utils.toJson($context.result);\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsUserTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerygetAppointment": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getAppointment",
              "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id),\n    }\n}",
              "ResponseMappingTemplate": "#set($authorized = false)\n#foreach($item in $context.result[\"canAccess\"])\n    #if($item == $context.identity.username)\n        #set($authorized = true)\n    #end\n#end\n\n#if($authorized)\n    $utils.toJson($context.result);\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsAppointmentTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerygetAppointmentsByPatient": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getAppointmentsByPatient",
              "RequestMappingTemplate": "#if($context.args.filter)\n\t#set( $filter = $context.args.filter )\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#else \n\t#set($filter = {})\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#end\n  \n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#patient = :patient AND #date >= :date\",\n        \"expressionNames\" : {\n            \"#patient\": \"patientId\",\n            \"#date\": \"date\"\n        },\n        \"expressionValues\" : {\n            \":patient\": { \"S\" : \"$context.args.patientId\" },\n            \":date\": { \"N\" : 0 }\n        }\n    },\n    \"index\" : \"patient-index\",\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"scanIndexForward\" : false,\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : $util.transform.toDynamoDBFilterExpression($filter)\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsAppointmentTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerygetAppointmentsByDoctor": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getAppointmentsByDoctor",
              "RequestMappingTemplate": "#if($context.args.filter)\n\t#set( $filter = $context.args.filter )\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#else \n\t#set($filter = {})\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#end\n\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#doctor = :doctor AND #date BETWEEN :from AND :to\",\n        \"expressionNames\" : {\n            \"#doctor\": \"doctorId\",\n            \"#date\": \"date\"\n        },\n        \"expressionValues\" : {\n            \":doctor\": { \"S\" : \"$context.args.doctorId\" },\n           \t\":from\": { \"N\" : \"$context.args.from\" },\n            \":to\": { \"N\" : \"$context.args.to\" }\n        }\n    },\n    \"index\" : \"doctor-index\",\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"scanIndexForward\" : false,\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : $util.transform.toDynamoDBFilterExpression($filter)\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsAppointmentTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerygetConversation": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getConversation",
              "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id),\n    }\n}",
              "ResponseMappingTemplate": "#set($authorized = false)\n#foreach($item in $context.result[\"canAccess\"])\n    #if($item == $context.identity.username)\n        #set($authorized = true)\n    #end\n#end\n\n#if($authorized)\n    $utils.toJson($context.result);\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsConversationTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerygetConversationsByDoctor": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getConversationsByDoctor",
              "RequestMappingTemplate": "#if($context.args.filter)\n\t#set( $filter = $context.args.filter )\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#else \n\t#set($filter = {})\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#end\n\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#doctor = :doctor AND #timestamp >= :timestamp\",\n        \"expressionNames\" : {\n            \"#doctor\": \"doctorId\",\n            \"#timestamp\": \"updatedAt\"\n        },\n        \"expressionValues\" : {\n            \":doctor\": { \"S\" : \"$context.args.doctorId\" },\n           \t\":timestamp\": { \"N\" : 0 }\n        }\n    },\n    \"index\" : \"doctor-timestamp-index\",\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"limit\" : $util.defaultIfNull($context.args.limit, 20),\n    \"scanIndexForward\" : false,\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : $util.transform.toDynamoDBFilterExpression($filter)\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsConversationTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerygetConversationsByPatient": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getConversationsByPatient",
              "RequestMappingTemplate": "#if($context.args.filter)\n\t#set( $filter = $context.args.filter )\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#else \n\t#set($filter = {})\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#end\n\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#patient = :patient AND #timestamp >= :timestamp\",\n        \"expressionNames\" : {\n            \"#patient\": \"patientId\",\n            \"#timestamp\": \"updatedAt\"\n        },\n        \"expressionValues\" : {\n            \":patient\": { \"S\" : \"$context.args.patientId\" },\n           \t\":timestamp\": { \"N\" : 0 }\n        }\n    },\n    \"index\" : \"patient-timestamp-index\",\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"limit\" : $util.defaultIfNull($context.args.limit, 20),\n    \"scanIndexForward\" : false,\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : $util.transform.toDynamoDBFilterExpression($filter)\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsConversationTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverQuerygetMessagesFromAConversation": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getMessagesFromAConversation",
              "RequestMappingTemplate": "#if($context.args.filter)\n\t#set( $filter = $context.args.filter )\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#else \n\t#set($filter = {})\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#end\n\n  #set( $startFromTime = $util.defaultIfNull($context.args.startFromTime, 0) )\n    {\n        \"version\" : \"2017-02-28\",\n        \"operation\" : \"Query\",\n        \"query\" : {\n          \"expression\": \"conversationId = :conversationId and createdAt > :startFrom\",\n            \"expressionValues\" : {\n              \":conversationId\" : { \"S\" : \"$context.args.conversationId\" },\n              \":startFrom\" : { \"N\" : \"$startFromTime\" }\n            }\n        },\n        \"scanIndexForward\": #if($context.args.sortDirection == \"ASC\") true #else false #end,\n        \"limit\": #if($ctx.args.limit) $ctx.args.limit #else null #end,\n        \"nextToken\": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n        \"filter\" : $util.transform.toDynamoDBFilterExpression($filter)\n    }",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsMessageTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverConversationmessages": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Conversation",
              "FieldName": "messages",
              "RequestMappingTemplate": "#if($context.args.filter)\n\t#set( $filter = $context.args.filter )\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#else \n\t#set($filter = {})\n    #set ($filterWithAuthorization = $filter.put(\"canAccess\", {\"contains\": \"${context.identity.username}\" }))\n#end\n\n  #set( $startFromTime = $util.defaultIfNull($context.args.startFromTime, 0) )\n    {\n        \"version\" : \"2017-02-28\",\n        \"operation\" : \"Query\",\n        \"query\" : {\n          \"expression\": \"conversationId = :conversationId and createdAt > :startFrom\",\n            \"expressionValues\" : {\n              \":conversationId\" : { \"S\" : \"$context.source.id\" },\n              \":startFrom\" : { \"N\" : \"$startFromTime\" }\n            }\n        },\n        \"scanIndexForward\": #if($context.args.sortDirection == \"ASC\") true #else false #end,\n        \"limit\": #if($ctx.args.limit) $ctx.args.limit #else null #end,\n        \"nextToken\": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n        \"filter\" : $util.transform.toDynamoDBFilterExpression($filter)\n    }",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsMessageTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverMutationcreateAppointment": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createAppointment",
              "RequestMappingTemplate": "#set( $args  = $ctx.args.input )\n#set( $canAccess = [] )\n#set( $withDoctorId = ${canAccess.add(${ctx.args.input.doctorId})} )\n#set( $withPatientId = ${canAccess.add(${ctx.args.input.patientId})} )\n#set($argsWithOwners = $args.put(\"canAccess\", ${canAccess}))\n\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\" : $util.dynamodb.toMapValuesJson($args),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsAppointmentTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverMutationcreateConversation": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createConversation",
              "RequestMappingTemplate": "#set( $args  = $ctx.args.input )\n#set( $canAccess = [] )\n#set( $withDoctorId = ${canAccess.add(${ctx.args.input.doctorId})} )\n#set( $withPatientId = ${canAccess.add(${ctx.args.input.patientId})} )\n#set($argsWithOwners = $args.put(\"canAccess\", ${canAccess}))\n\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\" : $util.dynamodb.toMapValuesJson($args),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsConversationTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverMutationcreateMessage": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createMessage",
              "RequestMappingTemplate": "#set( $args = $ctx.args.input )\n#set( $canAccess = [] )\n#set( $withDoctorId = ${canAccess.add(${ctx.args.input.doctorId})} )\n#set( $withPatientId = ${canAccess.add(${ctx.args.input.patientId})} )\n#set($argsWithOwners = $args.put(\"canAccess\", ${canAccess}))\n\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\" : $util.dynamodb.toMapValuesJson($args),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsMessageTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverMutationupdateAppointment": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateAppointment",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n   \"condition\" : {\n      \"expression\": \"contains(#canAccess, :expectedOwner)\",\n        \"expressionNames\": {\n          \"#canAccess\": \"canAccess\"\n      },\n      \"expressionValues\": {\n        \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n      }\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsAppointmentTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverMutationupdateConversation": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateConversation",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n   \"condition\" : {\n      \"expression\": \"contains(#canAccess, :expectedOwner)\",\n        \"expressionNames\": {\n          \"#canAccess\": \"canAccess\"\n      },\n      \"expressionValues\": {\n        \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n      }\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsConversationTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverMutationupdateDoctor": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateDoctor",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n   \"condition\" : {\n      \"expression\": \"contains(#owner, :expectedOwner)\",\n        \"expressionNames\": {\n          \"#owner\": \"owner\"\n      },\n      \"expressionValues\": {\n        \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n      }\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsDoctorTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverMutationcreateUser": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createUser",
              "RequestMappingTemplate": "#set( $args  = $ctx.args.input )\n#set($argsWithOwner = $args.put(\"owner\", ${context.identity.username}))\n\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\" : $util.dynamodb.toMapValuesJson($args),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsUserTableProd",
                  "Name"
                ]
              }
            }
          },
          "PotluckmedprodGraphQlResolverMutationupdateUser": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "PotluckmedprodGraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateUser",
              "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n   \"condition\" : {\n      \"expression\": \"contains(#owner, :expectedOwner)\",\n        \"expressionNames\": {\n          \"#owner\": \"owner\"\n      },\n      \"expressionValues\": {\n        \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n      }\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "PotluckmedprodGraphQlDsUserTableProd",
                  "Name"
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "PotluckenterpriseprodGraphQlApiUrl": {
            "Value": {
              "Fn::GetAtt": [
                "PotluckenterpriseprodGraphQlApi",
                "GraphQLUrl"
              ]
            }
          },
          "PotluckmarketapiprodGraphQlApiUrl": {
            "Value": {
              "Fn::GetAtt": [
                "PotluckmarketapiprodGraphQlApi",
                "GraphQLUrl"
              ]
            }
          },
          "PotluckmarketapiprodGraphQlApiKeyDefault": {
            "Value": {
              "Fn::GetAtt": [
                "PotluckmarketapiprodGraphQlApiKeyDefault",
                "ApiKey"
              ]
            }
          },
          "PotluckmedprodGraphQlApiUrl": {
            "Value": {
              "Fn::GetAtt": [
                "PotluckmedprodGraphQlApi",
                "GraphQLUrl"
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "accountId": {
        "Ref": "AWS::AccountId"
      },
      "appSync": [
        {
          "name": "potluck-enterprise-prod",
          "authenticationType": "AMAZON_COGNITO_USER_POOLS",
          "userPoolConfig": {
            "awsRegion": "us-east-1",
            "defaultAction": "ALLOW",
            "userPoolId": "us-east-1_ys3BakDVJ"
          },
          "serviceRole": "AppSyncServiceRole",
          "schema": "enterprise/schema.graphql",
          "mappingTemplatesLocation": "mapping-templates",
          "dataSources": [
            {
              "type": "AMAZON_DYNAMODB",
              "name": "ProductTableProd",
              "description": "Product Table",
              "config": {
                "tableName": "product-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckenterpriseprodGraphQlDsProductTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            },
            {
              "type": "AMAZON_DYNAMODB",
              "name": "StoreTableProd",
              "description": "Store Table",
              "config": {
                "tableName": "store-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckenterpriseprodGraphQlDsStoreTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            },
            {
              "type": "AMAZON_DYNAMODB",
              "name": "InventoryTableProd",
              "description": "Inventory Table",
              "config": {
                "tableName": "inventory-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckenterpriseprodGraphQlDsInventoryTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            }
          ],
          "mappingTemplates": [
            {
              "dataSource": "StoreTableProd",
              "type": "Mutation",
              "field": "createStore",
              "request": "common-create-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "StoreTableProd",
              "type": "Mutation",
              "field": "updateStore",
              "request": "update-store-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "StoreTableProd",
              "type": "Mutation",
              "field": "deleteStore",
              "request": "delete-store-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "StoreTableProd",
              "type": "Query",
              "field": "getStore",
              "request": "get-store-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "StoreTableProd",
              "type": "Query",
              "field": "getCompanyStores",
              "request": "get-company-stores-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "InventoryTableProd",
              "type": "Mutation",
              "field": "createInventoryItem",
              "request": "common-create-with-owner-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "InventoryTableProd",
              "type": "Mutation",
              "field": "deleteInventoryItem",
              "request": "delete-inventory-item-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "InventoryTableProd",
              "type": "Mutation",
              "field": "updateInventoryItem",
              "request": "update-inventory-item-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "InventoryTableProd",
              "type": "Query",
              "field": "getStoreInventory",
              "request": "get-store-inventory-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "ProductTableProd",
              "type": "InventoryItem",
              "field": "product",
              "request": "product-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "ProductTableProd",
              "type": "Mutation",
              "field": "createProduct",
              "request": "common-create-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "ProductTableProd",
              "type": "Query",
              "field": "getProduct",
              "request": "get-product-request.vtl",
              "response": "common-response.vtl"
            }
          ]
        },
        {
          "name": "potluck-market-api-prod",
          "authenticationType": "AMAZON_COGNITO_USER_POOLS",
          "userPoolConfig": {
            "awsRegion": "us-east-1",
            "defaultAction": "ALLOW",
            "userPoolId": "us-east-1_CwBA0oPZ3"
          },
          "serviceRole": "AppSyncServiceRole",
          "schema": "market/schema.graphql",
          "mappingTemplatesLocation": "mapping-templates",
          "additionalAuthenticationProviders": [
            {
              "authenticationType": "API_KEY"
            }
          ],
          "dataSources": [
            {
              "type": "AMAZON_DYNAMODB",
              "name": "ProductTableProd",
              "description": "Product Table",
              "config": {
                "tableName": "product-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckmarketapiprodGraphQlDsProductTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            },
            {
              "type": "AMAZON_DYNAMODB",
              "name": "StoreTableProd",
              "description": "Store Table",
              "config": {
                "tableName": "store-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckmarketapiprodGraphQlDsStoreTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            },
            {
              "type": "AMAZON_DYNAMODB",
              "name": "InventoryTableProd",
              "description": "Inventory Table",
              "config": {
                "tableName": "inventory-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckmarketapiprodGraphQlDsInventoryTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            },
            {
              "type": "AMAZON_DYNAMODB",
              "name": "DoctorTableProd",
              "description": "DynamoDB Doctor Table",
              "config": {
                "tableName": "doctor-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckmarketapiprodGraphQlDsDoctorTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            },
            {
              "type": "AMAZON_DYNAMODB",
              "name": "UserTableProd",
              "description": "DynamoDB User Table",
              "config": {
                "tableName": "user-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckmarketapiprodGraphQlDsUserTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            }
          ],
          "mappingTemplates": [
            {
              "dataSource": "StoreTableProd",
              "type": "Query",
              "field": "listStores",
              "request": "common-list-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "InventoryTableProd",
              "type": "Store",
              "field": "inventory",
              "request": "inventory-from-source-id-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "ProductTableProd",
              "type": "InventoryItem",
              "field": "product",
              "request": "product-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "DoctorTableProd",
              "type": "Query",
              "field": "getDoctor",
              "request": "common-get-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "DoctorTableProd",
              "type": "Mutation",
              "field": "createDoctor",
              "request": "common-create-with-owner-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "DoctorTableProd",
              "type": "Mutation",
              "field": "updateDoctor",
              "request": "update-doctor-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "UserTableProd",
              "type": "Query",
              "field": "getUser",
              "request": "common-get-request.vtl",
              "response": "owner-can-read-response.vtl"
            },
            {
              "dataSource": "UserTableProd",
              "type": "Mutation",
              "field": "createUser",
              "request": "common-create-with-owner-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "UserTableProd",
              "type": "Mutation",
              "field": "updateUser",
              "request": "update-user-request.vtl",
              "response": "common-response.vtl"
            }
          ]
        },
        {
          "name": "potluck-med-prod",
          "authenticationType": "AMAZON_COGNITO_USER_POOLS",
          "userPoolConfig": {
            "awsRegion": "us-east-1",
            "defaultAction": "ALLOW",
            "userPoolId": "us-east-1_CwBA0oPZ3"
          },
          "serviceRole": "AppSyncServiceRole",
          "schema": "med/schema.graphql",
          "mappingTemplatesLocation": "mapping-templates",
          "dataSources": [
            {
              "type": "AMAZON_DYNAMODB",
              "name": "DoctorTableProd",
              "description": "Doctor Table",
              "config": {
                "tableName": "doctor-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckmedprodGraphQlDsDoctorTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            },
            {
              "type": "AMAZON_DYNAMODB",
              "name": "UserTableProd",
              "description": "DynamoDB User Table",
              "config": {
                "tableName": "user-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckmedprodGraphQlDsUserTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            },
            {
              "type": "AMAZON_DYNAMODB",
              "name": "AppointmentTableProd",
              "description": "Appointment Table",
              "config": {
                "tableName": "appointment-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckmedprodGraphQlDsAppointmentTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            },
            {
              "type": "AMAZON_DYNAMODB",
              "name": "ConversationTableProd",
              "description": "Conversation Table",
              "config": {
                "tableName": "conversation-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckmedprodGraphQlDsConversationTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            },
            {
              "type": "AMAZON_DYNAMODB",
              "name": "MessageTableProd",
              "description": "Message Table",
              "config": {
                "tableName": "message-table-prod",
                "serviceRoleArn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PotluckmedprodGraphQlDsMessageTableProd\"][\"Properties\"][\"ServiceRoleArn\"]"
                }
              }
            }
          ],
          "mappingTemplates": [
            {
              "dataSource": "DoctorTableProd",
              "type": "Query",
              "field": "getDoctor",
              "request": "common-get-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "DoctorTableProd",
              "type": "Query",
              "field": "listDoctors",
              "request": "common-list-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "DoctorTableProd",
              "type": "Query",
              "field": "getDoctorsByCounty",
              "request": "get-doctors-by-county-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "UserTableProd",
              "type": "Query",
              "field": "getUser",
              "request": "common-get-request.vtl",
              "response": "owner-can-read-response.vtl"
            },
            {
              "dataSource": "AppointmentTableProd",
              "type": "Query",
              "field": "getAppointment",
              "request": "common-get-request.vtl",
              "response": "has-access-can-read-response.vtl"
            },
            {
              "dataSource": "AppointmentTableProd",
              "type": "Query",
              "field": "getAppointmentsByPatient",
              "request": "get-appointments-by-patient-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "AppointmentTableProd",
              "type": "Query",
              "field": "getAppointmentsByDoctor",
              "request": "get-appointments-by-doctor-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "ConversationTableProd",
              "type": "Query",
              "field": "getConversation",
              "request": "common-get-request.vtl",
              "response": "has-access-can-read-response.vtl"
            },
            {
              "dataSource": "ConversationTableProd",
              "type": "Query",
              "field": "getConversationsByDoctor",
              "request": "get-conversations-by-doctor-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "ConversationTableProd",
              "type": "Query",
              "field": "getConversationsByPatient",
              "request": "get-conversations-by-patient-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "MessageTableProd",
              "type": "Query",
              "field": "getMessagesFromAConversation",
              "request": "get-messages-from-a-conversation-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "MessageTableProd",
              "type": "Conversation",
              "field": "messages",
              "request": "get-messages-from-a-conversation-source-id-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "AppointmentTableProd",
              "type": "Mutation",
              "field": "createAppointment",
              "request": "create-appointment-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "ConversationTableProd",
              "type": "Mutation",
              "field": "createConversation",
              "request": "create-conversation-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "MessageTableProd",
              "type": "Mutation",
              "field": "createMessage",
              "request": "create-message-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "AppointmentTableProd",
              "type": "Mutation",
              "field": "updateAppointment",
              "request": "update-appointment-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "ConversationTableProd",
              "type": "Mutation",
              "field": "updateConversation",
              "request": "update-conversation-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "DoctorTableProd",
              "type": "Mutation",
              "field": "updateDoctor",
              "request": "update-doctor-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "UserTableProd",
              "type": "Mutation",
              "field": "createUser",
              "request": "common-create-with-owner-request.vtl",
              "response": "common-response.vtl"
            },
            {
              "dataSource": "UserTableProd",
              "type": "Mutation",
              "field": "updateUser",
              "request": "update-user-request.vtl",
              "response": "common-response.vtl"
            }
          ]
        }
      ]
    },
    "plugins": [
      "serverless-appsync-plugin"
    ],
    "pluginsData": {},
    "functions": {},
    "resources": {
      "Resources": {
        "StoreTableProd": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Description": "Data Store for AWS AppSync Store Type",
          "Properties": {
            "TableName": "store-table-prod",
            "AttributeDefinitions": [
              {
                "AttributeName": "companyId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "companyId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "id",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "ProductTableProd": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Description": "Data Store for AWS AppSync Product Type",
          "Properties": {
            "TableName": "product-table-prod",
            "AttributeDefinitions": [
              {
                "AttributeName": "slug",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "slug",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "InventoryTableProd": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Description": "Data Store for AWS AppSync Inventory Type",
          "Properties": {
            "TableName": "inventory-table-prod",
            "AttributeDefinitions": [
              {
                "AttributeName": "storeId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "createdAt",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "storeId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "createdAt",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "DoctorTableProd": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Description": "Data Store for AWS AppSync Doctor Type",
          "Properties": {
            "TableName": "doctor-table-prod",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "metadata",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "metadata-index",
                "KeySchema": [
                  {
                    "AttributeName": "metadata",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": "1",
                  "WriteCapacityUnits": "1"
                }
              }
            ]
          }
        },
        "UserTableProd": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Description": "Data Store for AWS AppSync User Type",
          "Properties": {
            "TableName": "user-table-prod",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "AppSyncDynamoDBPolicy": {
          "Type": "AWS::IAM::ManagedPolicy",
          "Properties": {
            "Description": "Managed Policy to allow AWS AppSync to access tables in DynamoDB",
            "Path": "/appsync/",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:BatchGetItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:*"
                }
              ]
            }
          }
        },
        "DynamoDBRole": {
          "Type": "AWS::IAM::Role",
          "Description": "IAM Role for allowing AppSync to access DynamoDB",
          "DependsOn": [
            "AppSyncDynamoDBPolicy"
          ],
          "Properties": {
            "RoleName": "potluck-api-prod-appsync-dynamodb-role",
            "ManagedPolicyArns": [
              {
                "Ref": "AppSyncDynamoDBPolicy"
              }
            ],
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Principal": {
                    "Service": [
                      "appsync.amazonaws.com"
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/potluck-api-prod/dev/1572145193516-2019-10-27T02:59:53.516Z",
    "artifact": ""
  }
}