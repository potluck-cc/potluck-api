enum County {
  Atlantic
  Bergen
  Burlington
  Camden
  Capemay
  Cumberland
  Essex
  Gloucester
  Hudson
  Hunterdon
  Mercer
  Middlesex
  Monmouth
  Morris
  Ocean
  Passaic
  Salem
  Somerset
  Sussex
  Union
  Warren
}

enum State {
  NJ
}

enum Day {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}

type timeblock @aws_api_key @aws_cognito_user_pools {
  day: Day
  startTime: String
  endTime: String
}

type Doctor @aws_api_key @aws_cognito_user_pools {
  id: ID!
  address: String!
  county: County!
  metadata: String!
  hours: [timeblock]
  latitude: String!
  longitude: String!
  name: String!
  newPatients: Boolean!
  phone: String
  specialty: String!
  receiveChats: Boolean
  bio: String
  image: AWSURL
  insuranceAccpeted: Boolean
  firstVisit: String
  followUp: String
  renewal: String
  bookingFee: String
  visitLength: String
  marketToken: String
  medToken: String
}

input CreateDoctorInput {
  id: String!
  address: String!
  county: String!
  hours: AWSJSON
  latitude: String!
  longitude: String!
  metadata: String!
  name: String!
  newPatients: Boolean!
  phone: String
  specialty: String!
  receiveChats: Boolean
  pricePerVisit: String
  bio: String
  image: AWSURL
  firstVisit: String
  followUp: String
  renewal: String
  bookingFee: String
  visitLength: String
  insuranceAccpeted: Boolean
  marketToken: String
  medToken: String
}

input UpdateDoctorInput {
  id: ID!
  address: String
  hours: AWSJSON
  name: String
  phone: String
  receiveChats: Boolean
  bio: String
  image: AWSURL
  firstVisit: String
  followUp: String
  renewal: String
  bookingFee: String
  visitLength: String
  insuranceAccpeted: Boolean
  metadata: String!
  marketToken: String
  medToken: String
}

type StoreDrivers @aws_api_key @aws_cognito_user_pools {
  id: ID
  firstname: String
  lastname: String
}

type Store @aws_api_key @aws_cognito_user_pools {
  id: ID!
  companyId: ID!
  hours: [timeblock]
  inventory: InventoryItemConnection
  name: String!
  phone: String
  latitude: Float!
  longitude: Float!
  state: State!
  city: String!
  link: AWSURL
  street: String!
  zip: String!
  logo: AWSURL
  storefrontImage: AWSURL
  pickup: Boolean
  delivery: Boolean
  maxDays: Int
  drivers: StoreDrivers
  public: Boolean
}

type StoreConnection @aws_api_key @aws_cognito_user_pools {
  items: [Store]
  nextToken: String
}

input TableStoreFilterInput {
  city: TableStringFilterInput
  id: TableIDFilterInput
  inventory: TableStringFilterInput
  name: TableStringFilterInput
  zip: TableStringFilterInput
  pickup: TableBooleanFilterInput
  delivery: TableBooleanFilterInput
  public: TableBooleanFilterInput
}

type Product @aws_api_key @aws_cognito_user_pools {
  id: ID!
  name: String!
  slug: String!
}

type ProductConnection {
  items: [Product]
  nextToken: String
}

enum ProductType {
  Flower
  Concentrate
  Edible
  Topical
  PreRolls
}

enum StrainType {
  CBD
  Hybrid
  Indica
  Sativa
}

enum WeightOptions {
  gram
  eighth
  quarter
  half
  ounce
}

type Option @aws_api_key @aws_cognito_user_pools {
  amount: Float
  weight: WeightOptions
}

type InventoryItem @aws_api_key @aws_cognito_user_pools {
  storeId: ID!
  id: ID!
  product: Product!
  productType: ProductType!
  image: AWSURL
  quantity: Float!
  thc: String
  cbd: String
  description: String
  strainType: StrainType
  brand: String
  displayName: String
  price: Float
  options: [Option]
  isCannabisProduct: Boolean
  latitude: Float
  longitude: Float
  createdAt: AWSTimestamp
  updatedAt: AWSTimestamp
}

type InventoryItemConnection @aws_api_key @aws_cognito_user_pools {
  items: [InventoryItem]
  nextToken: String
}

input TableInventoryItemFilterInput {
  id: TableIDFilterInput
  product: TableStringFilterInput
  quantity: TableFloatFilterInput
  productType: TableStringFilterInput
  isCannabisProduct: TableBooleanFilterInput
}

type User @aws_api_key @aws_cognito_user_pools {
  id: ID!
  confirmed: Boolean
  firstname: String
  lastname: String
  street: String
  city: String
  state: State
  patientID: String
  expiration: String
  email: AWSEmail
  phone: AWSPhone
  marketToken: String
  medToken: String
}

input CreateUserInput {
  id: ID!
  confirmed: Boolean
  firstname: String
  lastname: String
  patientID: String
  expiration: String
  email: AWSEmail
  phone: AWSPhone
  dob: String
  issued: String
  street: String
  city: String
  state: State
  marketToken: String
  medToken: String
}

input UpdateUserInput {
  id: ID!
  confirmed: Boolean
  firstname: String
  lastname: String
  patientID: String
  expiration: String
  email: AWSEmail
  phone: AWSPhone
  dob: String
  issued: String
  street: String
  city: String
  state: State
  marketToken: String
  medToken: String
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

type Mutation {
  createDoctor(input: CreateDoctorInput!): Doctor
    @aws_auth(cognito_groups: ["Doctor"])

  updateDoctor(input: UpdateDoctorInput!): Doctor
    @aws_auth(cognito_groups: ["Doctor"])

  createUser(input: CreateUserInput!): User @aws_cognito_user_pools

  updateUser(input: UpdateUserInput!): User @aws_cognito_user_pools
}

type Query {
  getDoctor(id: ID!): Doctor @aws_cognito_user_pools

  getUser(id: ID!): User @aws_cognito_user_pools

  listStores(
    filter: TableStoreFilterInput
    limit: Int
    nextToken: String
  ): StoreConnection @aws_api_key @aws_cognito_user_pools
}

schema {
  query: Query
  mutation: Mutation
}
